% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pyrate.input.R
\name{pyrate.input}
\alias{pyrate.input}
\title{Generate input file for analysis using the program pyrate}
\usage{
pyrate.input(fossils, python = FALSE, traits = NULL, cutoff = NULL,
  random = FALSE, min = NULL, print.extant = FALSE, file = "")
}
\arguments{
\item{fossils}{Fossils object.}

\item{python}{If TRUE the function outputs a file in python format.
If FALSE the function outputs a standard text file in the format used by pyrate (default).}

\item{traits}{Vector of trait values equal to the number of specimens, including extant samples if present in the fossils dataframe.
Each entry corresponds to the order in which they appear in fossils$sp.}

\item{cutoff}{Exclude occurrences with age uncertainty greater than this value. i.e. \code{hmax - hmin > cutoff}.}

\item{random}{If TRUE use a random number from within the interval U(hmin, hmax) for specimen ages,
otherwise use the midpoint of this interval (default). Applicable only when \code{python = TRUE} and for specimens with \code{hmin != hmax}.}

\item{min}{Value used to represent the minimum possible interval age of extinct specimens with \code{hmin = 0}. By default \code{min = NULL} and the function uses the sampling times in the fossils dataframe.}

\item{print.extant}{If TRUE also output sampling times and trait values for extant samples. Default = FALSE.}

\item{file}{Output file name.}
}
\description{
Generate input file for analysis using the program pyrate
}
\examples{

set.seed(123)

# simulate tree
t = ape::rtree(6)

# assign a max age based on tree height
max.age = tree.max(t)

# define a set of non-uniform length intervals
times = c(0, sort(runif(3, min = 0, max = max.age)), max.age)
rates = c(1,2,3,4)

# simulate fossils reflect age uncertainty
f = sim.fossils.intervals(tree = t, interval.ages = times, rates = rates,
    use.exact.times = FALSE)

# simulate extant samples
rho = 1
f = sim.extant.samples(f, t, rho = 1)

plot(f, t)

# generate input files for pyrate
pyrate.input(f)
pyrate.input(f, python = TRUE)

# add trait values
traits = runif(length(f$sp))
pyrate.input(f, traits = traits)

}
